/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/datetimepicker.js":
/*!****************************************!*\
  !*** ./resources/js/datetimepicker.js ***!
  \****************************************/
/***/ (() => {

eval("(function ($) {\n  'use strict';\n\n  $.fn.dateTimePicker = function (options) {\n    var settings = $.extend({\n      selectData: \"now\",\n      dateFormat: \"YYYY-MM-DD HH:mm\",\n      showTime: true,\n      locale: 'en',\n      positionShift: {\n        top: 20,\n        left: 0\n      },\n      title: \"Select Date and Time\",\n      buttonTitle: \"Select\"\n    }, options);\n    moment.locale(settings.locale);\n    var elem = this;\n    var limitation = {\n      \"hour\": 23,\n      \"minute\": 59\n    };\n    var mousedown = false;\n    var timeout = 800;\n    var selectDate = settings.selectData == \"now\" ? moment() : moment(settings.selectData, settings.dateFormat);\n\n    if (selectDate < moment()) {\n      selectDate = moment();\n    }\n\n    var startDate = copyDate(moment());\n    var lastSelected = copyDate(selectDate);\n    return this.each(function () {\n      if (lastSelected != selectDate) {\n        selectDate = copyDate(lastSelected);\n      }\n\n      elem.addClass(\"dtp_main\");\n      updateMainElemGlobal(); //  elem.text(selectDate.format(settings.dateFormat));\n\n      function updateMainElemGlobal() {\n        var arrF = settings.dateFormat.split(' ');\n\n        if (settings.showTime && arrF.length != 2) {\n          arrF.length = 2;\n          arrF[0] = 'DD/MM/YY';\n          arrF[1] = 'HH:mm';\n        }\n\n        var $s = $('<span>');\n        $s.text(lastSelected.format(arrF[0]));\n        elem.empty();\n        elem.append($s);\n        $s = $('<i>');\n        $s.addClass('fa fa-calendar ico-size');\n        elem.append($s);\n\n        if (settings.showTime) {\n          $s = $('<span>');\n          $s.text(lastSelected.format(arrF[1]));\n          elem.append($s);\n          $s = $('<i>');\n          $s.addClass('fa fa-clock-o ico-size');\n          elem.append($s);\n        }\n      }\n\n      elem.on('click', function () {\n        var $win = $('<div>');\n        $win.addClass(\"dtp_modal-win\");\n        var $body = $('body');\n        $body.append($win);\n        var $content = createContent();\n        $body.append($content);\n        var offset = elem.offset();\n        $content.css({\n          top: offset.top + settings.positionShift.top + \"px\",\n          left: offset.left + settings.positionShift.left + \"px\"\n        });\n        feelDates(selectDate);\n        $win.on('click', function () {\n          $content.remove();\n          $win.remove();\n        });\n\n        if (settings.showTime) {\n          attachChangeTime();\n          var $fieldTime = $('#field-time');\n          var $hour = $fieldTime.find('#d-hh');\n          var $minute = $fieldTime.find('#d-mm');\n        }\n\n        function feelDates(selectM) {\n          var $fDate = $content.find('#field-data');\n          $fDate.empty();\n          $fDate.append(createMonthPanel(selectM));\n          $fDate.append(createCalendar(selectM));\n        }\n\n        function createCalendar(selectedMonth) {\n          var $c = $('<div>');\n          $c.addClass('dtp_modal-calendar');\n\n          for (var i = 0; i < 7; i++) {\n            var $e = $('<div>');\n            $e.addClass('dtp_modal-calendar-cell dtp_modal-colored');\n            $e.text(moment().weekday(i).format('ddd'));\n            $c.append($e);\n          }\n\n          var m = copyDate(selectedMonth);\n          m.date(1); // console.log(m.format('DD--MM--YYYY'));\n          // console.log(selectData.format('DD--MM--YYYY'));\n          // console.log(m.weekday());\n\n          var flagStart = totalMonths(selectedMonth) === totalMonths(startDate);\n          var flagSelect = totalMonths(lastSelected) === totalMonths(selectedMonth);\n          var cerDay = parseInt(selectedMonth.format('D'));\n          var dayNow = parseInt(startDate.format('D'));\n\n          for (var i = 0; i < 6; i++) {\n            for (var j = 0; j < 7; j++) {\n              var $b = $('<div>');\n              $b.html('&nbsp;');\n              $b.addClass('dtp_modal-calendar-cell');\n\n              if (m.month() == selectedMonth.month() && m.weekday() == j) {\n                var day = parseInt(m.format('D'));\n                $b.text(day);\n\n                if (flagStart && day < dayNow) {\n                  $b.addClass('dtp_modal-grey');\n                } else if (flagSelect && day == cerDay) {\n                  $b.addClass('dtp_modal-cell-selected');\n                } else {\n                  $b.addClass('cursorily');\n                  $b.bind('click', changeDate);\n                }\n\n                m.add(1, 'days');\n              }\n\n              $c.append($b);\n            }\n          }\n\n          return $c;\n        }\n\n        function changeDate() {\n          var $div = $(this);\n          selectDate.date($div.text());\n          lastSelected = copyDate(selectDate);\n          updateDate();\n          var $fDate = $content.find('#field-data');\n          var old = $fDate.find('.dtp_modal-cell-selected');\n          old.removeClass('dtp_modal-cell-selected');\n          old.addClass('cursorily');\n          $div.addClass('dtp_modal-cell-selected');\n          $div.removeClass('cursorily');\n          old.bind('click', changeDate);\n          $div.unbind('click'); // console.log(selectDate.format('DD-MM-YYYY'));\n        }\n\n        function createMonthPanel(selectMonth) {\n          var $d = $('<div>');\n          $d.addClass('dtp_modal-months');\n          var $s = $('<i></i>');\n          $s.addClass('fa fa-angle-left cursorily ico-size-month hov'); //$s.attr('data-fa-mask', 'fas fa-circle');\n\n          $s.bind('click', prevMonth);\n          $d.append($s);\n          $s = $('<span>');\n          $s.text(selectMonth.format(\"MMMM YYYY\"));\n          $d.append($s);\n          $s = $('<i></i>');\n          $s.addClass('fa fa-angle-right cursorily ico-size-month hov');\n          $s.bind('click', nextMonth);\n          $d.append($s);\n          return $d;\n        }\n\n        function close() {\n          if (settings.showTime) {\n            lastSelected.hour(parseInt($hour.text()));\n            lastSelected.minute(parseInt($minute.text()));\n            selectDate.hour(parseInt($hour.text()));\n            selectDate.minute(parseInt($minute.text()));\n          }\n\n          updateDate();\n          $content.remove();\n          $win.remove();\n        }\n\n        function nextMonth() {\n          selectDate.add(1, 'month');\n          feelDates(selectDate);\n        }\n\n        function prevMonth() {\n          if (totalMonths(selectDate) > totalMonths(startDate)) {\n            selectDate.add(-1, 'month');\n            feelDates(selectDate);\n          }\n        }\n\n        function attachChangeTime() {\n          var $angles = $($content).find('i[id^=\"angle-\"]'); // $angles.bind('click', changeTime);\n\n          $angles.bind('mouseup', function () {\n            mousedown = false;\n            timeout = 800;\n          });\n          $angles.bind('mousedown', function () {\n            mousedown = true;\n            changeTime(this);\n          });\n        }\n\n        function changeTime(el) {\n          var $el = this || el;\n          $el = $($el); ///angle-up-hour angle-up-minute angle-down-hour angle-down-minute\n\n          var arr = $el.attr('id').split('-');\n          var increment = 1;\n\n          if (arr[1] == 'down') {\n            increment = -1;\n          }\n\n          appendIncrement(arr[2], increment);\n          setTimeout(function () {\n            autoIncrement($el);\n          }, timeout);\n        }\n\n        function autoIncrement(el) {\n          if (mousedown) {\n            if (timeout > 200) {\n              timeout -= 200;\n            }\n\n            changeTime(el);\n          }\n        }\n\n        function appendIncrement(typeDigits, increment) {\n          var $i = typeDigits == \"hour\" ? $hour : $minute;\n          var val = parseInt($i.text()) + increment;\n\n          if (val < 0) {\n            val = limitation[typeDigits];\n          } else if (val > limitation[typeDigits]) {\n            val = 0;\n          }\n\n          $i.text(formatDigits(val));\n        }\n\n        function formatDigits(val) {\n          if (val < 10) {\n            return '0' + val;\n          }\n\n          return val;\n        }\n\n        function createTimer() {\n          var $div = $('<div>');\n          $div.addClass('dtp_modal-time-mechanic');\n          var $panel = $('<div>');\n          $panel.addClass('dtp_modal-append');\n          var $i = $('<i>');\n          $i.attr('id', 'angle-up-hour');\n          $i.addClass('fa fa-angle-up ico-size-large cursorily hov');\n          $panel.append($i);\n          var $m = $('<span>');\n          $m.addClass('dtp_modal-midle');\n          $panel.append($m);\n          $i = $('<i>');\n          $i.attr('id', 'angle-up-minute');\n          $i.addClass('fa fa-angle-up ico-size-large cursorily hov');\n          $panel.append($i);\n          $div.append($panel);\n          $panel = $('<div>');\n          $panel.addClass('dtp_modal-digits');\n          var $d = $('<span>');\n          $d.addClass('dtp_modal-digit');\n          $d.attr('id', 'd-hh');\n          $d.text(lastSelected.format('HH'));\n          $panel.append($d);\n          $m = $('<span>');\n          $m.addClass('dtp_modal-midle-dig');\n          $m.html(':');\n          $panel.append($m);\n          $d = $('<span>');\n          $d.addClass('dtp_modal-digit');\n          $d.attr('id', 'd-mm');\n          $d.text(lastSelected.format('mm'));\n          $panel.append($d);\n          $div.append($panel);\n          $panel = $('<div>');\n          $panel.addClass('dtp_modal-append');\n          $i = $('<i>');\n          $i.attr('id', 'angle-down-hour');\n          $i.addClass('fa fa-angle-down ico-size-large cursorily hov');\n          $panel.append($i);\n          $m = $('<span>');\n          $m.addClass('dtp_modal-midle');\n          $panel.append($m);\n          $i = $('<i>');\n          $i.attr('id', 'angle-down-minute');\n          $i.addClass('fa fa-angle-down ico-size-large cursorily hov');\n          $panel.append($i);\n          $div.append($panel);\n          return $div;\n        }\n\n        function createContent() {\n          var $c = $('<div>');\n\n          if (settings.showTime) {\n            $c.addClass(\"dtp_modal-content\");\n          } else {\n            $c.addClass(\"dtp_modal-content-no-time\");\n          }\n\n          var $el = $('<div>');\n          $el.addClass(\"dtp_modal-title\");\n          $el.text(settings.title);\n          $c.append($el);\n          $el = $('<div>');\n          $el.addClass('dtp_modal-cell-date');\n          $el.attr('id', 'field-data');\n          $c.append($el);\n\n          if (settings.showTime) {\n            $el = $('<div>');\n            $el.addClass('dtp_modal-cell-time');\n            var $a = $('<div>');\n            $a.addClass('dtp_modal-time-block');\n            $a.attr('id', 'field-time');\n            $el.append($a);\n            var $line = $('<div>');\n            $line.attr('id', 'time-line');\n            $line.addClass('dtp_modal-time-line');\n            $line.text(lastSelected.format(settings.dateFormat));\n            $a.append($line);\n            $a.append(createTimer());\n            var $but = $('<div>');\n            $but.addClass('dpt_modal-button');\n            $but.text(settings.buttonTitle);\n            $but.bind('click', close);\n            $el.append($but);\n            $c.append($el);\n          }\n\n          return $c;\n        }\n\n        function updateDate() {\n          if (settings.showTime) {\n            $('#time-line').text(lastSelected.format(settings.dateFormat));\n          }\n\n          updateMainElem();\n          elem.next().val(selectDate.format(settings.dateFormat));\n\n          if (!settings.showTime) {\n            $content.remove();\n            $win.remove();\n          }\n        }\n\n        function updateMainElem() {\n          var arrF = settings.dateFormat.split(' ');\n\n          if (settings.showTime && arrF.length != 2) {\n            arrF.length = 2;\n            arrF[0] = 'DD/MM/YY';\n            arrF[1] = 'HH:mm';\n          }\n\n          var $s = $('<span>');\n          $s.text(lastSelected.format(arrF[0]));\n          elem.empty();\n          elem.append($s);\n          $s = $('<i>');\n          $s.addClass('fa fa-calendar ico-size');\n          elem.append($s);\n\n          if (settings.showTime) {\n            $s = $('<span>');\n            $s.text(lastSelected.format(arrF[1]));\n            elem.append($s);\n            $s = $('<i>');\n            $s.addClass('fa fa-clock-o ico-size');\n            elem.append($s);\n          }\n        }\n      });\n    });\n  };\n\n  function copyDate(d) {\n    return moment(d.toDate());\n  }\n\n  function totalMonths(m) {\n    var r = m.format('YYYY') * 12 + parseInt(m.format('MM'));\n    return r;\n  }\n})(jQuery); // fa-caret-down//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/datetimepicker.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/datetimepicker.js"]();
/******/ 	
/******/ })()
;